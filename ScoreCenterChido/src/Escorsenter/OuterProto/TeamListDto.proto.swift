// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file TeamListDTO.proto

import Foundation
import ProtocolBuffers


internal func == (lhs: TeamListDto, rhs: TeamListDto) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.items == rhs.items)
  fieldCheck = fieldCheck && (lhs.hasPageNumber == rhs.hasPageNumber) && (!lhs.hasPageNumber || lhs.pageNumber == rhs.pageNumber)
  fieldCheck = fieldCheck && (lhs.hasPageTotal == rhs.hasPageTotal) && (!lhs.hasPageTotal || lhs.pageTotal == rhs.pageTotal)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal struct TeamListDtoRoot {
  internal static var sharedInstance : TeamListDtoRoot {
   struct Static {
       static let instance : TeamListDtoRoot = TeamListDtoRoot()
   }
   return Static.instance
  }
  internal var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    TeamDtoRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  internal func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

final internal class TeamListDto : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  private(set) var items:Array<TeamDto>  = Array<TeamDto>()
  private(set) var hasPageNumber:Bool = false
  private(set) var pageNumber:Int32 = Int32(0)

  private(set) var hasPageTotal:Bool = false
  private(set) var pageTotal:Int32 = Int32(0)

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasPageNumber {
      return false
    }
    if !hasPageTotal {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    for oneElementitems in items {
        output.writeMessage(1, value:oneElementitems)
    }
    if hasPageNumber {
      output.writeInt32(2, value:pageNumber)
    }
    if hasPageTotal {
      output.writeInt32(3, value:pageTotal)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    for oneElementitems in items {
        serialize_size += oneElementitems.computeMessageSize(1)
    }
    if hasPageNumber {
      serialize_size += pageNumber.computeInt32Size(2)
    }
    if hasPageTotal {
      serialize_size += pageTotal.computeInt32Size(3)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) -> Array<TeamListDto> {
    var mergedArray = Array<TeamListDto>()
    while let value = parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromData(data:NSData) -> TeamListDto {
    return TeamListDto.Builder().mergeFromData(data, extensionRegistry:TeamListDtoRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> TeamListDto {
    return TeamListDto.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> TeamListDto {
    return TeamListDto.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) -> TeamListDto? {
    return TeamListDto.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> TeamListDto {
    return TeamListDto.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> TeamListDto {
    return TeamListDto.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TeamListDto {
    return TeamListDto.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> TeamListDto.Builder {
    return TeamListDto.classBuilder() as! TeamListDto.Builder
  }
  internal func getBuilder() -> TeamListDto.Builder {
    return classBuilder() as! TeamListDto.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return TeamListDto.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return TeamListDto.Builder()
  }
  internal func toBuilder() -> TeamListDto.Builder {
    return TeamListDto.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:TeamListDto) -> TeamListDto.Builder {
    return TeamListDto.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    var itemsElementIndex:Int = 0
    for oneElementitems in items {
        output += "\(indent) items[\(itemsElementIndex)] {\n"
        oneElementitems.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        itemsElementIndex++
    }
    if hasPageNumber {
      output += "\(indent) pageNumber: \(pageNumber) \n"
    }
    if hasPageTotal {
      output += "\(indent) pageTotal: \(pageTotal) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          for oneElementitems in items {
              hashCode = (hashCode &* 31) &+ oneElementitems.hashValue
          }
          if hasPageNumber {
             hashCode = (hashCode &* 31) &+ pageNumber.hashValue
          }
          if hasPageTotal {
             hashCode = (hashCode &* 31) &+ pageTotal.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "TeamListDto"
  }
  override internal func className() -> String {
      return "TeamListDto"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return TeamListDto.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:TeamListDto = TeamListDto()
    internal func getMessage() -> TeamListDto {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var items:Array<TeamDto> {
         get {
             return builderResult.items
         }
         set (value) {
             builderResult.items = value
         }
    }
    func setItems(value:Array<TeamDto>) -> TeamListDto.Builder {
      self.items = value
      return self
    }
    internal func clearItems() -> TeamListDto.Builder {
      builderResult.items.removeAll(keepCapacity: false)
      return self
    }
    var hasPageNumber:Bool {
         get {
              return builderResult.hasPageNumber
         }
    }
    var pageNumber:Int32 {
         get {
              return builderResult.pageNumber
         }
         set (value) {
             builderResult.hasPageNumber = true
             builderResult.pageNumber = value
         }
    }
    func setPageNumber(value:Int32) -> TeamListDto.Builder {
      self.pageNumber = value
      return self
    }
    internal func clearPageNumber() -> TeamListDto.Builder{
         builderResult.hasPageNumber = false
         builderResult.pageNumber = Int32(0)
         return self
    }
    var hasPageTotal:Bool {
         get {
              return builderResult.hasPageTotal
         }
    }
    var pageTotal:Int32 {
         get {
              return builderResult.pageTotal
         }
         set (value) {
             builderResult.hasPageTotal = true
             builderResult.pageTotal = value
         }
    }
    func setPageTotal(value:Int32) -> TeamListDto.Builder {
      self.pageTotal = value
      return self
    }
    internal func clearPageTotal() -> TeamListDto.Builder{
         builderResult.hasPageTotal = false
         builderResult.pageTotal = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> TeamListDto.Builder {
      builderResult = TeamListDto()
      return self
    }
    internal override func clone() -> TeamListDto.Builder {
      return TeamListDto.builderWithPrototype(builderResult)
    }
    internal override func build() -> TeamListDto {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> TeamListDto {
      var returnMe:TeamListDto = builderResult
      return returnMe
    }
    internal func mergeFrom(other:TeamListDto) -> TeamListDto.Builder {
      if other == TeamListDto() {
       return self
      }
      if !other.items.isEmpty  {
         builderResult.items += other.items
      }
      if other.hasPageNumber {
           pageNumber = other.pageNumber
      }
      if other.hasPageTotal {
           pageTotal = other.pageTotal
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) -> TeamListDto.Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TeamListDto.Builder {
      var unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder = TeamDto.Builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          items += [subBuilder.buildPartial()]

        case 16 :
          pageNumber = input.readInt32()

        case 24 :
          pageTotal = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}


// @@protoc_insertion_point(global_scope)
