// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file NotificationDTO.proto

import Foundation
import ProtocolBuffers


internal func == (lhs: NotificationDto, rhs: NotificationDto) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
  fieldCheck = fieldCheck && (lhs.hasContent == rhs.hasContent) && (!lhs.hasContent || lhs.content == rhs.content)
  fieldCheck = fieldCheck && (lhs.hasDate == rhs.hasDate) && (!lhs.hasDate || lhs.date == rhs.date)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal struct NotificationDtoRoot {
  internal static var sharedInstance : NotificationDtoRoot {
   struct Static {
       static let instance : NotificationDtoRoot = NotificationDtoRoot()
   }
   return Static.instance
  }
  internal var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  internal func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

final internal class NotificationDto : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  private(set) var hasId:Bool = false
  private(set) var id:Int64 = Int64(0)

  private(set) var hasTitle:Bool = false
  private(set) var title:String = ""

  private(set) var hasContent:Bool = false
  private(set) var content:String = ""

  private(set) var hasDate:Bool = false
  private(set) var date:String = ""

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasId {
      output.writeInt64(1, value:id)
    }
    if hasTitle {
      output.writeString(2, value:title)
    }
    if hasContent {
      output.writeString(3, value:content)
    }
    if hasDate {
      output.writeString(4, value:date)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasId {
      serialize_size += id.computeInt64Size(1)
    }
    if hasTitle {
      serialize_size += title.computeStringSize(2)
    }
    if hasContent {
      serialize_size += content.computeStringSize(3)
    }
    if hasDate {
      serialize_size += date.computeStringSize(4)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) -> Array<NotificationDto> {
    var mergedArray = Array<NotificationDto>()
    while let value = parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromData(data:NSData) -> NotificationDto {
    return NotificationDto.Builder().mergeFromData(data, extensionRegistry:NotificationDtoRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> NotificationDto {
    return NotificationDto.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> NotificationDto {
    return NotificationDto.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) -> NotificationDto? {
    return NotificationDto.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> NotificationDto {
    return NotificationDto.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> NotificationDto {
    return NotificationDto.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> NotificationDto {
    return NotificationDto.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> NotificationDto.Builder {
    return NotificationDto.classBuilder() as! NotificationDto.Builder
  }
  internal func getBuilder() -> NotificationDto.Builder {
    return classBuilder() as! NotificationDto.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return NotificationDto.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return NotificationDto.Builder()
  }
  internal func toBuilder() -> NotificationDto.Builder {
    return NotificationDto.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:NotificationDto) -> NotificationDto.Builder {
    return NotificationDto.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasId {
      output += "\(indent) id: \(id) \n"
    }
    if hasTitle {
      output += "\(indent) title: \(title) \n"
    }
    if hasContent {
      output += "\(indent) content: \(content) \n"
    }
    if hasDate {
      output += "\(indent) date: \(date) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasId {
             hashCode = (hashCode &* 31) &+ id.hashValue
          }
          if hasTitle {
             hashCode = (hashCode &* 31) &+ title.hashValue
          }
          if hasContent {
             hashCode = (hashCode &* 31) &+ content.hashValue
          }
          if hasDate {
             hashCode = (hashCode &* 31) &+ date.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "NotificationDto"
  }
  override internal func className() -> String {
      return "NotificationDto"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return NotificationDto.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:NotificationDto = NotificationDto()
    internal func getMessage() -> NotificationDto {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    var id:Int64 {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    func setId(value:Int64) -> NotificationDto.Builder {
      self.id = value
      return self
    }
    internal func clearId() -> NotificationDto.Builder{
         builderResult.hasId = false
         builderResult.id = Int64(0)
         return self
    }
    var hasTitle:Bool {
         get {
              return builderResult.hasTitle
         }
    }
    var title:String {
         get {
              return builderResult.title
         }
         set (value) {
             builderResult.hasTitle = true
             builderResult.title = value
         }
    }
    func setTitle(value:String) -> NotificationDto.Builder {
      self.title = value
      return self
    }
    internal func clearTitle() -> NotificationDto.Builder{
         builderResult.hasTitle = false
         builderResult.title = ""
         return self
    }
    var hasContent:Bool {
         get {
              return builderResult.hasContent
         }
    }
    var content:String {
         get {
              return builderResult.content
         }
         set (value) {
             builderResult.hasContent = true
             builderResult.content = value
         }
    }
    func setContent(value:String) -> NotificationDto.Builder {
      self.content = value
      return self
    }
    internal func clearContent() -> NotificationDto.Builder{
         builderResult.hasContent = false
         builderResult.content = ""
         return self
    }
    var hasDate:Bool {
         get {
              return builderResult.hasDate
         }
    }
    var date:String {
         get {
              return builderResult.date
         }
         set (value) {
             builderResult.hasDate = true
             builderResult.date = value
         }
    }
    func setDate(value:String) -> NotificationDto.Builder {
      self.date = value
      return self
    }
    internal func clearDate() -> NotificationDto.Builder{
         builderResult.hasDate = false
         builderResult.date = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> NotificationDto.Builder {
      builderResult = NotificationDto()
      return self
    }
    internal override func clone() -> NotificationDto.Builder {
      return NotificationDto.builderWithPrototype(builderResult)
    }
    internal override func build() -> NotificationDto {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> NotificationDto {
      var returnMe:NotificationDto = builderResult
      return returnMe
    }
    internal func mergeFrom(other:NotificationDto) -> NotificationDto.Builder {
      if other == NotificationDto() {
       return self
      }
      if other.hasId {
           id = other.id
      }
      if other.hasTitle {
           title = other.title
      }
      if other.hasContent {
           content = other.content
      }
      if other.hasDate {
           date = other.date
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) -> NotificationDto.Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> NotificationDto.Builder {
      var unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          id = input.readInt64()

        case 18 :
          title = input.readString()

        case 26 :
          content = input.readString()

        case 34 :
          date = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}


// @@protoc_insertion_point(global_scope)
