// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file MatchDTO.proto

import Foundation
import ProtocolBuffers


internal func == (lhs: MatchDto, rhs: MatchDto) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasDate == rhs.hasDate) && (!lhs.hasDate || lhs.date == rhs.date)
  fieldCheck = fieldCheck && (lhs.hasField == rhs.hasField) && (!lhs.hasField || lhs.field == rhs.field)
  fieldCheck = fieldCheck && (lhs.hasTeam1 == rhs.hasTeam1) && (!lhs.hasTeam1 || lhs.team1 == rhs.team1)
  fieldCheck = fieldCheck && (lhs.hasScoreTeam1 == rhs.hasScoreTeam1) && (!lhs.hasScoreTeam1 || lhs.scoreTeam1 == rhs.scoreTeam1)
  fieldCheck = fieldCheck && (lhs.hasTeam2 == rhs.hasTeam2) && (!lhs.hasTeam2 || lhs.team2 == rhs.team2)
  fieldCheck = fieldCheck && (lhs.hasScoreTeam2 == rhs.hasScoreTeam2) && (!lhs.hasScoreTeam2 || lhs.scoreTeam2 == rhs.scoreTeam2)
  fieldCheck = fieldCheck && (lhs.hasFinished == rhs.hasFinished) && (!lhs.hasFinished || lhs.finished == rhs.finished)
  fieldCheck = fieldCheck && (lhs.hasForfeit == rhs.hasForfeit) && (!lhs.hasForfeit || lhs.forfeit == rhs.forfeit)
  fieldCheck = fieldCheck && (lhs.hasDetails == rhs.hasDetails) && (!lhs.hasDetails || lhs.details == rhs.details)
  fieldCheck = fieldCheck && (lhs.hasScoreExtraTimeTeam1 == rhs.hasScoreExtraTimeTeam1) && (!lhs.hasScoreExtraTimeTeam1 || lhs.scoreExtraTimeTeam1 == rhs.scoreExtraTimeTeam1)
  fieldCheck = fieldCheck && (lhs.hasScoreExtraTimeTeam2 == rhs.hasScoreExtraTimeTeam2) && (!lhs.hasScoreExtraTimeTeam2 || lhs.scoreExtraTimeTeam2 == rhs.scoreExtraTimeTeam2)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal struct MatchDtoRoot {
  internal static var sharedInstance : MatchDtoRoot {
   struct Static {
       static let instance : MatchDtoRoot = MatchDtoRoot()
   }
   return Static.instance
  }
  internal var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    FieldDtoRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    TeamDtoRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  internal func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

final internal class MatchDto : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  private(set) var hasId:Bool = false
  private(set) var id:Int64 = Int64(0)

  private(set) var hasDate:Bool = false
  private(set) var date:String = ""

  private(set) var hasField:Bool = false
  private(set) var field:FieldDto!
  private(set) var hasDetails:Bool = false
  private(set) var details:String = ""

  private(set) var hasTeam1:Bool = false
  private(set) var team1:TeamDto!
  private(set) var hasScoreTeam1:Bool = false
  private(set) var scoreTeam1:Int64 = Int64(0)

  private(set) var hasScoreExtraTimeTeam1:Bool = false
  private(set) var scoreExtraTimeTeam1:Int64 = Int64(0)

  private(set) var hasTeam2:Bool = false
  private(set) var team2:TeamDto!
  private(set) var hasScoreTeam2:Bool = false
  private(set) var scoreTeam2:Int64 = Int64(0)

  private(set) var hasScoreExtraTimeTeam2:Bool = false
  private(set) var scoreExtraTimeTeam2:Int64 = Int64(0)

  private(set) var hasFinished:Bool = false
  private(set) var finished:Bool = false

  private(set) var hasForfeit:Bool = false
  private(set) var forfeit:Bool = false

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasId {
      output.writeInt64(1, value:id)
    }
    if hasDate {
      output.writeString(2, value:date)
    }
    if hasField {
      output.writeMessage(3, value:field)
    }
    if hasTeam1 {
      output.writeMessage(4, value:team1)
    }
    if hasScoreTeam1 {
      output.writeInt64(5, value:scoreTeam1)
    }
    if hasTeam2 {
      output.writeMessage(6, value:team2)
    }
    if hasScoreTeam2 {
      output.writeInt64(7, value:scoreTeam2)
    }
    if hasFinished {
      output.writeBool(8, value:finished)
    }
    if hasForfeit {
      output.writeBool(9, value:forfeit)
    }
    if hasDetails {
      output.writeString(19, value:details)
    }
    if hasScoreExtraTimeTeam1 {
      output.writeInt64(20, value:scoreExtraTimeTeam1)
    }
    if hasScoreExtraTimeTeam2 {
      output.writeInt64(22, value:scoreExtraTimeTeam2)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasId {
      serialize_size += id.computeInt64Size(1)
    }
    if hasDate {
      serialize_size += date.computeStringSize(2)
    }
    if hasField {
        if let varSizefield = field?.computeMessageSize(3) {
            serialize_size += varSizefield
        }
    }
    if hasTeam1 {
        if let varSizeteam1 = team1?.computeMessageSize(4) {
            serialize_size += varSizeteam1
        }
    }
    if hasScoreTeam1 {
      serialize_size += scoreTeam1.computeInt64Size(5)
    }
    if hasTeam2 {
        if let varSizeteam2 = team2?.computeMessageSize(6) {
            serialize_size += varSizeteam2
        }
    }
    if hasScoreTeam2 {
      serialize_size += scoreTeam2.computeInt64Size(7)
    }
    if hasFinished {
      serialize_size += finished.computeBoolSize(8)
    }
    if hasForfeit {
      serialize_size += forfeit.computeBoolSize(9)
    }
    if hasDetails {
      serialize_size += details.computeStringSize(19)
    }
    if hasScoreExtraTimeTeam1 {
      serialize_size += scoreExtraTimeTeam1.computeInt64Size(20)
    }
    if hasScoreExtraTimeTeam2 {
      serialize_size += scoreExtraTimeTeam2.computeInt64Size(22)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) -> Array<MatchDto> {
    var mergedArray = Array<MatchDto>()
    while let value = parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromData(data:NSData) -> MatchDto {
    return MatchDto.Builder().mergeFromData(data, extensionRegistry:MatchDtoRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> MatchDto {
    return MatchDto.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> MatchDto {
    return MatchDto.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) -> MatchDto? {
    return MatchDto.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> MatchDto {
    return MatchDto.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> MatchDto {
    return MatchDto.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MatchDto {
    return MatchDto.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> MatchDto.Builder {
    return MatchDto.classBuilder() as! MatchDto.Builder
  }
  internal func getBuilder() -> MatchDto.Builder {
    return classBuilder() as! MatchDto.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return MatchDto.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return MatchDto.Builder()
  }
  internal func toBuilder() -> MatchDto.Builder {
    return MatchDto.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:MatchDto) -> MatchDto.Builder {
    return MatchDto.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasId {
      output += "\(indent) id: \(id) \n"
    }
    if hasDate {
      output += "\(indent) date: \(date) \n"
    }
    if hasField {
      output += "\(indent) field {\n"
      field?.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasTeam1 {
      output += "\(indent) team1 {\n"
      team1?.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasScoreTeam1 {
      output += "\(indent) scoreTeam1: \(scoreTeam1) \n"
    }
    if hasTeam2 {
      output += "\(indent) team2 {\n"
      team2?.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasScoreTeam2 {
      output += "\(indent) scoreTeam2: \(scoreTeam2) \n"
    }
    if hasFinished {
      output += "\(indent) finished: \(finished) \n"
    }
    if hasForfeit {
      output += "\(indent) forfeit: \(forfeit) \n"
    }
    if hasDetails {
      output += "\(indent) details: \(details) \n"
    }
    if hasScoreExtraTimeTeam1 {
      output += "\(indent) scoreExtraTimeTeam1: \(scoreExtraTimeTeam1) \n"
    }
    if hasScoreExtraTimeTeam2 {
      output += "\(indent) scoreExtraTimeTeam2: \(scoreExtraTimeTeam2) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasId {
             hashCode = (hashCode &* 31) &+ id.hashValue
          }
          if hasDate {
             hashCode = (hashCode &* 31) &+ date.hashValue
          }
          if hasField {
              if let hashValuefield = field?.hashValue {
                  hashCode = (hashCode &* 31) &+ hashValuefield
              }
          }
          if hasTeam1 {
              if let hashValueteam1 = team1?.hashValue {
                  hashCode = (hashCode &* 31) &+ hashValueteam1
              }
          }
          if hasScoreTeam1 {
             hashCode = (hashCode &* 31) &+ scoreTeam1.hashValue
          }
          if hasTeam2 {
              if let hashValueteam2 = team2?.hashValue {
                  hashCode = (hashCode &* 31) &+ hashValueteam2
              }
          }
          if hasScoreTeam2 {
             hashCode = (hashCode &* 31) &+ scoreTeam2.hashValue
          }
          if hasFinished {
             hashCode = (hashCode &* 31) &+ finished.hashValue
          }
          if hasForfeit {
             hashCode = (hashCode &* 31) &+ forfeit.hashValue
          }
          if hasDetails {
             hashCode = (hashCode &* 31) &+ details.hashValue
          }
          if hasScoreExtraTimeTeam1 {
             hashCode = (hashCode &* 31) &+ scoreExtraTimeTeam1.hashValue
          }
          if hasScoreExtraTimeTeam2 {
             hashCode = (hashCode &* 31) &+ scoreExtraTimeTeam2.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "MatchDto"
  }
  override internal func className() -> String {
      return "MatchDto"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return MatchDto.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:MatchDto = MatchDto()
    internal func getMessage() -> MatchDto {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    var id:Int64 {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    func setId(value:Int64) -> MatchDto.Builder {
      self.id = value
      return self
    }
    internal func clearId() -> MatchDto.Builder{
         builderResult.hasId = false
         builderResult.id = Int64(0)
         return self
    }
    var hasDate:Bool {
         get {
              return builderResult.hasDate
         }
    }
    var date:String {
         get {
              return builderResult.date
         }
         set (value) {
             builderResult.hasDate = true
             builderResult.date = value
         }
    }
    func setDate(value:String) -> MatchDto.Builder {
      self.date = value
      return self
    }
    internal func clearDate() -> MatchDto.Builder{
         builderResult.hasDate = false
         builderResult.date = ""
         return self
    }
    var hasField:Bool {
         get {
             return builderResult.hasField
         }
    }
    var field:FieldDto! {
         get {
             if fieldBuilder_ != nil {
                builderResult.field = fieldBuilder_.getMessage()
             }
             return builderResult.field
         }
         set (value) {
             builderResult.hasField = true
             builderResult.field = value
         }
    }
    private var fieldBuilder_:FieldDto.Builder! {
         didSet {
            builderResult.hasField = true
         }
    }
    internal func getFieldBuilder() -> FieldDto.Builder {
      if fieldBuilder_ == nil {
         fieldBuilder_ = FieldDto.Builder()
         builderResult.field = fieldBuilder_.getMessage()
         if field != nil {
            fieldBuilder_.mergeFrom(field)
         }
      }
      return fieldBuilder_
    }
    func setField(value:FieldDto!) -> MatchDto.Builder {
      self.field = value
      return self
    }
    internal func mergeField(value:FieldDto) -> MatchDto.Builder {
      if builderResult.hasField {
        builderResult.field = FieldDto.builderWithPrototype(builderResult.field).mergeFrom(value).buildPartial()
      } else {
        builderResult.field = value
      }
      builderResult.hasField = true
      return self
    }
    internal func clearField() -> MatchDto.Builder {
      fieldBuilder_ = nil
      builderResult.hasField = false
      builderResult.field = nil
      return self
    }
    var hasDetails:Bool {
         get {
              return builderResult.hasDetails
         }
    }
    var details:String {
         get {
              return builderResult.details
         }
         set (value) {
             builderResult.hasDetails = true
             builderResult.details = value
         }
    }
    func setDetails(value:String) -> MatchDto.Builder {
      self.details = value
      return self
    }
    internal func clearDetails() -> MatchDto.Builder{
         builderResult.hasDetails = false
         builderResult.details = ""
         return self
    }
    var hasTeam1:Bool {
         get {
             return builderResult.hasTeam1
         }
    }
    var team1:TeamDto! {
         get {
             if team1Builder_ != nil {
                builderResult.team1 = team1Builder_.getMessage()
             }
             return builderResult.team1
         }
         set (value) {
             builderResult.hasTeam1 = true
             builderResult.team1 = value
         }
    }
    private var team1Builder_:TeamDto.Builder! {
         didSet {
            builderResult.hasTeam1 = true
         }
    }
    internal func getTeam1Builder() -> TeamDto.Builder {
      if team1Builder_ == nil {
         team1Builder_ = TeamDto.Builder()
         builderResult.team1 = team1Builder_.getMessage()
         if team1 != nil {
            team1Builder_.mergeFrom(team1)
         }
      }
      return team1Builder_
    }
    func setTeam1(value:TeamDto!) -> MatchDto.Builder {
      self.team1 = value
      return self
    }
    internal func mergeTeam1(value:TeamDto) -> MatchDto.Builder {
      if builderResult.hasTeam1 {
        builderResult.team1 = TeamDto.builderWithPrototype(builderResult.team1).mergeFrom(value).buildPartial()
      } else {
        builderResult.team1 = value
      }
      builderResult.hasTeam1 = true
      return self
    }
    internal func clearTeam1() -> MatchDto.Builder {
      team1Builder_ = nil
      builderResult.hasTeam1 = false
      builderResult.team1 = nil
      return self
    }
    var hasScoreTeam1:Bool {
         get {
              return builderResult.hasScoreTeam1
         }
    }
    var scoreTeam1:Int64 {
         get {
              return builderResult.scoreTeam1
         }
         set (value) {
             builderResult.hasScoreTeam1 = true
             builderResult.scoreTeam1 = value
         }
    }
    func setScoreTeam1(value:Int64) -> MatchDto.Builder {
      self.scoreTeam1 = value
      return self
    }
    internal func clearScoreTeam1() -> MatchDto.Builder{
         builderResult.hasScoreTeam1 = false
         builderResult.scoreTeam1 = Int64(0)
         return self
    }
    var hasScoreExtraTimeTeam1:Bool {
         get {
              return builderResult.hasScoreExtraTimeTeam1
         }
    }
    var scoreExtraTimeTeam1:Int64 {
         get {
              return builderResult.scoreExtraTimeTeam1
         }
         set (value) {
             builderResult.hasScoreExtraTimeTeam1 = true
             builderResult.scoreExtraTimeTeam1 = value
         }
    }
    func setScoreExtraTimeTeam1(value:Int64) -> MatchDto.Builder {
      self.scoreExtraTimeTeam1 = value
      return self
    }
    internal func clearScoreExtraTimeTeam1() -> MatchDto.Builder{
         builderResult.hasScoreExtraTimeTeam1 = false
         builderResult.scoreExtraTimeTeam1 = Int64(0)
         return self
    }
    var hasTeam2:Bool {
         get {
             return builderResult.hasTeam2
         }
    }
    var team2:TeamDto! {
         get {
             if team2Builder_ != nil {
                builderResult.team2 = team2Builder_.getMessage()
             }
             return builderResult.team2
         }
         set (value) {
             builderResult.hasTeam2 = true
             builderResult.team2 = value
         }
    }
    private var team2Builder_:TeamDto.Builder! {
         didSet {
            builderResult.hasTeam2 = true
         }
    }
    internal func getTeam2Builder() -> TeamDto.Builder {
      if team2Builder_ == nil {
         team2Builder_ = TeamDto.Builder()
         builderResult.team2 = team2Builder_.getMessage()
         if team2 != nil {
            team2Builder_.mergeFrom(team2)
         }
      }
      return team2Builder_
    }
    func setTeam2(value:TeamDto!) -> MatchDto.Builder {
      self.team2 = value
      return self
    }
    internal func mergeTeam2(value:TeamDto) -> MatchDto.Builder {
      if builderResult.hasTeam2 {
        builderResult.team2 = TeamDto.builderWithPrototype(builderResult.team2).mergeFrom(value).buildPartial()
      } else {
        builderResult.team2 = value
      }
      builderResult.hasTeam2 = true
      return self
    }
    internal func clearTeam2() -> MatchDto.Builder {
      team2Builder_ = nil
      builderResult.hasTeam2 = false
      builderResult.team2 = nil
      return self
    }
    var hasScoreTeam2:Bool {
         get {
              return builderResult.hasScoreTeam2
         }
    }
    var scoreTeam2:Int64 {
         get {
              return builderResult.scoreTeam2
         }
         set (value) {
             builderResult.hasScoreTeam2 = true
             builderResult.scoreTeam2 = value
         }
    }
    func setScoreTeam2(value:Int64) -> MatchDto.Builder {
      self.scoreTeam2 = value
      return self
    }
    internal func clearScoreTeam2() -> MatchDto.Builder{
         builderResult.hasScoreTeam2 = false
         builderResult.scoreTeam2 = Int64(0)
         return self
    }
    var hasScoreExtraTimeTeam2:Bool {
         get {
              return builderResult.hasScoreExtraTimeTeam2
         }
    }
    var scoreExtraTimeTeam2:Int64 {
         get {
              return builderResult.scoreExtraTimeTeam2
         }
         set (value) {
             builderResult.hasScoreExtraTimeTeam2 = true
             builderResult.scoreExtraTimeTeam2 = value
         }
    }
    func setScoreExtraTimeTeam2(value:Int64) -> MatchDto.Builder {
      self.scoreExtraTimeTeam2 = value
      return self
    }
    internal func clearScoreExtraTimeTeam2() -> MatchDto.Builder{
         builderResult.hasScoreExtraTimeTeam2 = false
         builderResult.scoreExtraTimeTeam2 = Int64(0)
         return self
    }
    var hasFinished:Bool {
         get {
              return builderResult.hasFinished
         }
    }
    var finished:Bool {
         get {
              return builderResult.finished
         }
         set (value) {
             builderResult.hasFinished = true
             builderResult.finished = value
         }
    }
    func setFinished(value:Bool) -> MatchDto.Builder {
      self.finished = value
      return self
    }
    internal func clearFinished() -> MatchDto.Builder{
         builderResult.hasFinished = false
         builderResult.finished = false
         return self
    }
    var hasForfeit:Bool {
         get {
              return builderResult.hasForfeit
         }
    }
    var forfeit:Bool {
         get {
              return builderResult.forfeit
         }
         set (value) {
             builderResult.hasForfeit = true
             builderResult.forfeit = value
         }
    }
    func setForfeit(value:Bool) -> MatchDto.Builder {
      self.forfeit = value
      return self
    }
    internal func clearForfeit() -> MatchDto.Builder{
         builderResult.hasForfeit = false
         builderResult.forfeit = false
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> MatchDto.Builder {
      builderResult = MatchDto()
      return self
    }
    internal override func clone() -> MatchDto.Builder {
      return MatchDto.builderWithPrototype(builderResult)
    }
    internal override func build() -> MatchDto {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> MatchDto {
      var returnMe:MatchDto = builderResult
      return returnMe
    }
    internal func mergeFrom(other:MatchDto) -> MatchDto.Builder {
      if other == MatchDto() {
       return self
      }
      if other.hasId {
           id = other.id
      }
      if other.hasDate {
           date = other.date
      }
      if (other.hasField) {
          mergeField(other.field)
      }
      if other.hasDetails {
           details = other.details
      }
      if (other.hasTeam1) {
          mergeTeam1(other.team1)
      }
      if other.hasScoreTeam1 {
           scoreTeam1 = other.scoreTeam1
      }
      if other.hasScoreExtraTimeTeam1 {
           scoreExtraTimeTeam1 = other.scoreExtraTimeTeam1
      }
      if (other.hasTeam2) {
          mergeTeam2(other.team2)
      }
      if other.hasScoreTeam2 {
           scoreTeam2 = other.scoreTeam2
      }
      if other.hasScoreExtraTimeTeam2 {
           scoreExtraTimeTeam2 = other.scoreExtraTimeTeam2
      }
      if other.hasFinished {
           finished = other.finished
      }
      if other.hasForfeit {
           forfeit = other.forfeit
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) -> MatchDto.Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MatchDto.Builder {
      var unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          id = input.readInt64()

        case 18 :
          date = input.readString()

        case 26 :
          var subBuilder:FieldDto.Builder = FieldDto.Builder()
          if hasField {
            subBuilder.mergeFrom(field)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          field = subBuilder.buildPartial()

        case 34 :
          var subBuilder:TeamDto.Builder = TeamDto.Builder()
          if hasTeam1 {
            subBuilder.mergeFrom(team1)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          team1 = subBuilder.buildPartial()

        case 40 :
          scoreTeam1 = input.readInt64()

        case 50 :
          var subBuilder:TeamDto.Builder = TeamDto.Builder()
          if hasTeam2 {
            subBuilder.mergeFrom(team2)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          team2 = subBuilder.buildPartial()

        case 56 :
          scoreTeam2 = input.readInt64()

        case 64 :
          finished = input.readBool()

        case 72 :
          forfeit = input.readBool()

        case 154 :
          details = input.readString()

        case 160 :
          scoreExtraTimeTeam1 = input.readInt64()

        case 176 :
          scoreExtraTimeTeam2 = input.readInt64()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}


// @@protoc_insertion_point(global_scope)
