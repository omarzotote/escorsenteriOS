// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file WeekDTO.proto

import Foundation
import ProtocolBuffers


internal func == (lhs: WeekDto, rhs: WeekDto) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasSeason == rhs.hasSeason) && (!lhs.hasSeason || lhs.season == rhs.season)
  fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
  fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
  fieldCheck = fieldCheck && (lhs.hasDateFrom == rhs.hasDateFrom) && (!lhs.hasDateFrom || lhs.dateFrom == rhs.dateFrom)
  fieldCheck = fieldCheck && (lhs.hasDateTo == rhs.hasDateTo) && (!lhs.hasDateTo || lhs.dateTo == rhs.dateTo)
  fieldCheck = fieldCheck && (lhs.matches == rhs.matches)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal struct WeekDtoRoot {
  internal static var sharedInstance : WeekDtoRoot {
   struct Static {
       static let instance : WeekDtoRoot = WeekDtoRoot()
   }
   return Static.instance
  }
  internal var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    MatchDtoRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  internal func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

final internal class WeekDto : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  private(set) var hasId:Bool = false
  private(set) var id:Int64 = Int64(0)

  private(set) var hasSeason:Bool = false
  private(set) var season:Int64 = Int64(0)

  private(set) var hasTitle:Bool = false
  private(set) var title:String = ""

  private(set) var hasDescription:Bool = false
  private(set) var description_:String = ""

  private(set) var hasDateFrom:Bool = false
  private(set) var dateFrom:String = ""

  private(set) var hasDateTo:Bool = false
  private(set) var dateTo:String = ""

  private(set) var matches:Array<MatchDto>  = Array<MatchDto>()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasId {
      output.writeInt64(1, value:id)
    }
    if hasSeason {
      output.writeInt64(2, value:season)
    }
    if hasTitle {
      output.writeString(3, value:title)
    }
    if hasDescription {
      output.writeString(4, value:description_)
    }
    if hasDateFrom {
      output.writeString(5, value:dateFrom)
    }
    if hasDateTo {
      output.writeString(6, value:dateTo)
    }
    for oneElementmatches in matches {
        output.writeMessage(7, value:oneElementmatches)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasId {
      serialize_size += id.computeInt64Size(1)
    }
    if hasSeason {
      serialize_size += season.computeInt64Size(2)
    }
    if hasTitle {
      serialize_size += title.computeStringSize(3)
    }
    if hasDescription {
      serialize_size += description_.computeStringSize(4)
    }
    if hasDateFrom {
      serialize_size += dateFrom.computeStringSize(5)
    }
    if hasDateTo {
      serialize_size += dateTo.computeStringSize(6)
    }
    for oneElementmatches in matches {
        serialize_size += oneElementmatches.computeMessageSize(7)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) -> Array<WeekDto> {
    var mergedArray = Array<WeekDto>()
    while let value = parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromData(data:NSData) -> WeekDto {
    return WeekDto.Builder().mergeFromData(data, extensionRegistry:WeekDtoRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> WeekDto {
    return WeekDto.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> WeekDto {
    return WeekDto.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) -> WeekDto? {
    return WeekDto.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> WeekDto {
    return WeekDto.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> WeekDto {
    return WeekDto.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> WeekDto {
    return WeekDto.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> WeekDto.Builder {
    return WeekDto.classBuilder() as! WeekDto.Builder
  }
  internal func getBuilder() -> WeekDto.Builder {
    return classBuilder() as! WeekDto.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return WeekDto.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return WeekDto.Builder()
  }
  internal func toBuilder() -> WeekDto.Builder {
    return WeekDto.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:WeekDto) -> WeekDto.Builder {
    return WeekDto.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasId {
      output += "\(indent) id: \(id) \n"
    }
    if hasSeason {
      output += "\(indent) season: \(season) \n"
    }
    if hasTitle {
      output += "\(indent) title: \(title) \n"
    }
    if hasDescription {
      output += "\(indent) description_: \(description_) \n"
    }
    if hasDateFrom {
      output += "\(indent) dateFrom: \(dateFrom) \n"
    }
    if hasDateTo {
      output += "\(indent) dateTo: \(dateTo) \n"
    }
    var matchesElementIndex:Int = 0
    for oneElementmatches in matches {
        output += "\(indent) matches[\(matchesElementIndex)] {\n"
        oneElementmatches.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        matchesElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasId {
             hashCode = (hashCode &* 31) &+ id.hashValue
          }
          if hasSeason {
             hashCode = (hashCode &* 31) &+ season.hashValue
          }
          if hasTitle {
             hashCode = (hashCode &* 31) &+ title.hashValue
          }
          if hasDescription {
             hashCode = (hashCode &* 31) &+ description_.hashValue
          }
          if hasDateFrom {
             hashCode = (hashCode &* 31) &+ dateFrom.hashValue
          }
          if hasDateTo {
             hashCode = (hashCode &* 31) &+ dateTo.hashValue
          }
          for oneElementmatches in matches {
              hashCode = (hashCode &* 31) &+ oneElementmatches.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "WeekDto"
  }
  override internal func className() -> String {
      return "WeekDto"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return WeekDto.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:WeekDto = WeekDto()
    internal func getMessage() -> WeekDto {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    var id:Int64 {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    func setId(value:Int64) -> WeekDto.Builder {
      self.id = value
      return self
    }
    internal func clearId() -> WeekDto.Builder{
         builderResult.hasId = false
         builderResult.id = Int64(0)
         return self
    }
    var hasSeason:Bool {
         get {
              return builderResult.hasSeason
         }
    }
    var season:Int64 {
         get {
              return builderResult.season
         }
         set (value) {
             builderResult.hasSeason = true
             builderResult.season = value
         }
    }
    func setSeason(value:Int64) -> WeekDto.Builder {
      self.season = value
      return self
    }
    internal func clearSeason() -> WeekDto.Builder{
         builderResult.hasSeason = false
         builderResult.season = Int64(0)
         return self
    }
    var hasTitle:Bool {
         get {
              return builderResult.hasTitle
         }
    }
    var title:String {
         get {
              return builderResult.title
         }
         set (value) {
             builderResult.hasTitle = true
             builderResult.title = value
         }
    }
    func setTitle(value:String) -> WeekDto.Builder {
      self.title = value
      return self
    }
    internal func clearTitle() -> WeekDto.Builder{
         builderResult.hasTitle = false
         builderResult.title = ""
         return self
    }
    var hasDescription:Bool {
         get {
              return builderResult.hasDescription
         }
    }
    var description_:String {
         get {
              return builderResult.description_
         }
         set (value) {
             builderResult.hasDescription = true
             builderResult.description_ = value
         }
    }
    func setDescription(value:String) -> WeekDto.Builder {
      self.description_ = value
      return self
    }
    internal func clearDescription() -> WeekDto.Builder{
         builderResult.hasDescription = false
         builderResult.description_ = ""
         return self
    }
    var hasDateFrom:Bool {
         get {
              return builderResult.hasDateFrom
         }
    }
    var dateFrom:String {
         get {
              return builderResult.dateFrom
         }
         set (value) {
             builderResult.hasDateFrom = true
             builderResult.dateFrom = value
         }
    }
    func setDateFrom(value:String) -> WeekDto.Builder {
      self.dateFrom = value
      return self
    }
    internal func clearDateFrom() -> WeekDto.Builder{
         builderResult.hasDateFrom = false
         builderResult.dateFrom = ""
         return self
    }
    var hasDateTo:Bool {
         get {
              return builderResult.hasDateTo
         }
    }
    var dateTo:String {
         get {
              return builderResult.dateTo
         }
         set (value) {
             builderResult.hasDateTo = true
             builderResult.dateTo = value
         }
    }
    func setDateTo(value:String) -> WeekDto.Builder {
      self.dateTo = value
      return self
    }
    internal func clearDateTo() -> WeekDto.Builder{
         builderResult.hasDateTo = false
         builderResult.dateTo = ""
         return self
    }
    var matches:Array<MatchDto> {
         get {
             return builderResult.matches
         }
         set (value) {
             builderResult.matches = value
         }
    }
    func setMatches(value:Array<MatchDto>) -> WeekDto.Builder {
      self.matches = value
      return self
    }
    internal func clearMatches() -> WeekDto.Builder {
      builderResult.matches.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> WeekDto.Builder {
      builderResult = WeekDto()
      return self
    }
    internal override func clone() -> WeekDto.Builder {
      return WeekDto.builderWithPrototype(builderResult)
    }
    internal override func build() -> WeekDto {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> WeekDto {
      var returnMe:WeekDto = builderResult
      return returnMe
    }
    internal func mergeFrom(other:WeekDto) -> WeekDto.Builder {
      if other == WeekDto() {
       return self
      }
      if other.hasId {
           id = other.id
      }
      if other.hasSeason {
           season = other.season
      }
      if other.hasTitle {
           title = other.title
      }
      if other.hasDescription {
           description_ = other.description_
      }
      if other.hasDateFrom {
           dateFrom = other.dateFrom
      }
      if other.hasDateTo {
           dateTo = other.dateTo
      }
      if !other.matches.isEmpty  {
         builderResult.matches += other.matches
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) -> WeekDto.Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> WeekDto.Builder {
      var unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          id = input.readInt64()

        case 16 :
          season = input.readInt64()

        case 26 :
          title = input.readString()

        case 34 :
          description_ = input.readString()

        case 42 :
          dateFrom = input.readString()

        case 50 :
          dateTo = input.readString()

        case 58 :
          var subBuilder = MatchDto.Builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          matches += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}


// @@protoc_insertion_point(global_scope)
