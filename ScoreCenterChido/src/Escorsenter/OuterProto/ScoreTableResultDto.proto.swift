// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file ScoreTableResultDTO.proto

import Foundation
import ProtocolBuffers


internal func == (lhs: ScoreTableResultDto, rhs: ScoreTableResultDto) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTeam == rhs.hasTeam) && (!lhs.hasTeam || lhs.team == rhs.team)
  fieldCheck = fieldCheck && (lhs.hasGamesPlayed == rhs.hasGamesPlayed) && (!lhs.hasGamesPlayed || lhs.gamesPlayed == rhs.gamesPlayed)
  fieldCheck = fieldCheck && (lhs.hasGamesWined == rhs.hasGamesWined) && (!lhs.hasGamesWined || lhs.gamesWined == rhs.gamesWined)
  fieldCheck = fieldCheck && (lhs.hasGamesDrawn == rhs.hasGamesDrawn) && (!lhs.hasGamesDrawn || lhs.gamesDrawn == rhs.gamesDrawn)
  fieldCheck = fieldCheck && (lhs.hasGamesLost == rhs.hasGamesLost) && (!lhs.hasGamesLost || lhs.gamesLost == rhs.gamesLost)
  fieldCheck = fieldCheck && (lhs.hasScoreFavor == rhs.hasScoreFavor) && (!lhs.hasScoreFavor || lhs.scoreFavor == rhs.scoreFavor)
  fieldCheck = fieldCheck && (lhs.hasScoreAgainst == rhs.hasScoreAgainst) && (!lhs.hasScoreAgainst || lhs.scoreAgainst == rhs.scoreAgainst)
  fieldCheck = fieldCheck && (lhs.hasScoreDifference == rhs.hasScoreDifference) && (!lhs.hasScoreDifference || lhs.scoreDifference == rhs.scoreDifference)
  fieldCheck = fieldCheck && (lhs.hasPoints == rhs.hasPoints) && (!lhs.hasPoints || lhs.points == rhs.points)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal struct ScoreTableResultDtoRoot {
  internal static var sharedInstance : ScoreTableResultDtoRoot {
   struct Static {
       static let instance : ScoreTableResultDtoRoot = ScoreTableResultDtoRoot()
   }
   return Static.instance
  }
  internal var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    TeamDtoRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  internal func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

final internal class ScoreTableResultDto : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  private(set) var hasTeam:Bool = false
  private(set) var team:TeamDto!
  private(set) var hasGamesPlayed:Bool = false
  private(set) var gamesPlayed:Int64 = Int64(0)

  private(set) var hasGamesWined:Bool = false
  private(set) var gamesWined:Int64 = Int64(0)

  private(set) var hasGamesDrawn:Bool = false
  private(set) var gamesDrawn:Int64 = Int64(0)

  private(set) var hasGamesLost:Bool = false
  private(set) var gamesLost:Int64 = Int64(0)

  private(set) var hasScoreFavor:Bool = false
  private(set) var scoreFavor:Int64 = Int64(0)

  private(set) var hasScoreAgainst:Bool = false
  private(set) var scoreAgainst:Int64 = Int64(0)

  private(set) var hasScoreDifference:Bool = false
  private(set) var scoreDifference:Int64 = Int64(0)

  private(set) var hasPoints:Bool = false
  private(set) var points:Int64 = Int64(0)

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasTeam {
      output.writeMessage(1, value:team)
    }
    if hasGamesPlayed {
      output.writeInt64(2, value:gamesPlayed)
    }
    if hasGamesWined {
      output.writeInt64(3, value:gamesWined)
    }
    if hasGamesDrawn {
      output.writeInt64(4, value:gamesDrawn)
    }
    if hasGamesLost {
      output.writeInt64(5, value:gamesLost)
    }
    if hasScoreFavor {
      output.writeInt64(6, value:scoreFavor)
    }
    if hasScoreAgainst {
      output.writeInt64(7, value:scoreAgainst)
    }
    if hasScoreDifference {
      output.writeInt64(8, value:scoreDifference)
    }
    if hasPoints {
      output.writeInt64(9, value:points)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasTeam {
        if let varSizeteam = team?.computeMessageSize(1) {
            serialize_size += varSizeteam
        }
    }
    if hasGamesPlayed {
      serialize_size += gamesPlayed.computeInt64Size(2)
    }
    if hasGamesWined {
      serialize_size += gamesWined.computeInt64Size(3)
    }
    if hasGamesDrawn {
      serialize_size += gamesDrawn.computeInt64Size(4)
    }
    if hasGamesLost {
      serialize_size += gamesLost.computeInt64Size(5)
    }
    if hasScoreFavor {
      serialize_size += scoreFavor.computeInt64Size(6)
    }
    if hasScoreAgainst {
      serialize_size += scoreAgainst.computeInt64Size(7)
    }
    if hasScoreDifference {
      serialize_size += scoreDifference.computeInt64Size(8)
    }
    if hasPoints {
      serialize_size += points.computeInt64Size(9)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) -> Array<ScoreTableResultDto> {
    var mergedArray = Array<ScoreTableResultDto>()
    while let value = parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromData(data:NSData) -> ScoreTableResultDto {
    return ScoreTableResultDto.Builder().mergeFromData(data, extensionRegistry:ScoreTableResultDtoRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ScoreTableResultDto {
    return ScoreTableResultDto.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> ScoreTableResultDto {
    return ScoreTableResultDto.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) -> ScoreTableResultDto? {
    return ScoreTableResultDto.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> ScoreTableResultDto {
    return ScoreTableResultDto.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> ScoreTableResultDto {
    return ScoreTableResultDto.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ScoreTableResultDto {
    return ScoreTableResultDto.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> ScoreTableResultDto.Builder {
    return ScoreTableResultDto.classBuilder() as! ScoreTableResultDto.Builder
  }
  internal func getBuilder() -> ScoreTableResultDto.Builder {
    return classBuilder() as! ScoreTableResultDto.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ScoreTableResultDto.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ScoreTableResultDto.Builder()
  }
  internal func toBuilder() -> ScoreTableResultDto.Builder {
    return ScoreTableResultDto.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ScoreTableResultDto) -> ScoreTableResultDto.Builder {
    return ScoreTableResultDto.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasTeam {
      output += "\(indent) team {\n"
      team?.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasGamesPlayed {
      output += "\(indent) gamesPlayed: \(gamesPlayed) \n"
    }
    if hasGamesWined {
      output += "\(indent) gamesWined: \(gamesWined) \n"
    }
    if hasGamesDrawn {
      output += "\(indent) gamesDrawn: \(gamesDrawn) \n"
    }
    if hasGamesLost {
      output += "\(indent) gamesLost: \(gamesLost) \n"
    }
    if hasScoreFavor {
      output += "\(indent) scoreFavor: \(scoreFavor) \n"
    }
    if hasScoreAgainst {
      output += "\(indent) scoreAgainst: \(scoreAgainst) \n"
    }
    if hasScoreDifference {
      output += "\(indent) scoreDifference: \(scoreDifference) \n"
    }
    if hasPoints {
      output += "\(indent) points: \(points) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasTeam {
              if let hashValueteam = team?.hashValue {
                  hashCode = (hashCode &* 31) &+ hashValueteam
              }
          }
          if hasGamesPlayed {
             hashCode = (hashCode &* 31) &+ gamesPlayed.hashValue
          }
          if hasGamesWined {
             hashCode = (hashCode &* 31) &+ gamesWined.hashValue
          }
          if hasGamesDrawn {
             hashCode = (hashCode &* 31) &+ gamesDrawn.hashValue
          }
          if hasGamesLost {
             hashCode = (hashCode &* 31) &+ gamesLost.hashValue
          }
          if hasScoreFavor {
             hashCode = (hashCode &* 31) &+ scoreFavor.hashValue
          }
          if hasScoreAgainst {
             hashCode = (hashCode &* 31) &+ scoreAgainst.hashValue
          }
          if hasScoreDifference {
             hashCode = (hashCode &* 31) &+ scoreDifference.hashValue
          }
          if hasPoints {
             hashCode = (hashCode &* 31) &+ points.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ScoreTableResultDto"
  }
  override internal func className() -> String {
      return "ScoreTableResultDto"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ScoreTableResultDto.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:ScoreTableResultDto = ScoreTableResultDto()
    internal func getMessage() -> ScoreTableResultDto {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasTeam:Bool {
         get {
             return builderResult.hasTeam
         }
    }
    var team:TeamDto! {
         get {
             if teamBuilder_ != nil {
                builderResult.team = teamBuilder_.getMessage()
             }
             return builderResult.team
         }
         set (value) {
             builderResult.hasTeam = true
             builderResult.team = value
         }
    }
    private var teamBuilder_:TeamDto.Builder! {
         didSet {
            builderResult.hasTeam = true
         }
    }
    internal func getTeamBuilder() -> TeamDto.Builder {
      if teamBuilder_ == nil {
         teamBuilder_ = TeamDto.Builder()
         builderResult.team = teamBuilder_.getMessage()
         if team != nil {
            teamBuilder_.mergeFrom(team)
         }
      }
      return teamBuilder_
    }
    func setTeam(value:TeamDto!) -> ScoreTableResultDto.Builder {
      self.team = value
      return self
    }
    internal func mergeTeam(value:TeamDto) -> ScoreTableResultDto.Builder {
      if builderResult.hasTeam {
        builderResult.team = TeamDto.builderWithPrototype(builderResult.team).mergeFrom(value).buildPartial()
      } else {
        builderResult.team = value
      }
      builderResult.hasTeam = true
      return self
    }
    internal func clearTeam() -> ScoreTableResultDto.Builder {
      teamBuilder_ = nil
      builderResult.hasTeam = false
      builderResult.team = nil
      return self
    }
    var hasGamesPlayed:Bool {
         get {
              return builderResult.hasGamesPlayed
         }
    }
    var gamesPlayed:Int64 {
         get {
              return builderResult.gamesPlayed
         }
         set (value) {
             builderResult.hasGamesPlayed = true
             builderResult.gamesPlayed = value
         }
    }
    func setGamesPlayed(value:Int64) -> ScoreTableResultDto.Builder {
      self.gamesPlayed = value
      return self
    }
    internal func clearGamesPlayed() -> ScoreTableResultDto.Builder{
         builderResult.hasGamesPlayed = false
         builderResult.gamesPlayed = Int64(0)
         return self
    }
    var hasGamesWined:Bool {
         get {
              return builderResult.hasGamesWined
         }
    }
    var gamesWined:Int64 {
         get {
              return builderResult.gamesWined
         }
         set (value) {
             builderResult.hasGamesWined = true
             builderResult.gamesWined = value
         }
    }
    func setGamesWined(value:Int64) -> ScoreTableResultDto.Builder {
      self.gamesWined = value
      return self
    }
    internal func clearGamesWined() -> ScoreTableResultDto.Builder{
         builderResult.hasGamesWined = false
         builderResult.gamesWined = Int64(0)
         return self
    }
    var hasGamesDrawn:Bool {
         get {
              return builderResult.hasGamesDrawn
         }
    }
    var gamesDrawn:Int64 {
         get {
              return builderResult.gamesDrawn
         }
         set (value) {
             builderResult.hasGamesDrawn = true
             builderResult.gamesDrawn = value
         }
    }
    func setGamesDrawn(value:Int64) -> ScoreTableResultDto.Builder {
      self.gamesDrawn = value
      return self
    }
    internal func clearGamesDrawn() -> ScoreTableResultDto.Builder{
         builderResult.hasGamesDrawn = false
         builderResult.gamesDrawn = Int64(0)
         return self
    }
    var hasGamesLost:Bool {
         get {
              return builderResult.hasGamesLost
         }
    }
    var gamesLost:Int64 {
         get {
              return builderResult.gamesLost
         }
         set (value) {
             builderResult.hasGamesLost = true
             builderResult.gamesLost = value
         }
    }
    func setGamesLost(value:Int64) -> ScoreTableResultDto.Builder {
      self.gamesLost = value
      return self
    }
    internal func clearGamesLost() -> ScoreTableResultDto.Builder{
         builderResult.hasGamesLost = false
         builderResult.gamesLost = Int64(0)
         return self
    }
    var hasScoreFavor:Bool {
         get {
              return builderResult.hasScoreFavor
         }
    }
    var scoreFavor:Int64 {
         get {
              return builderResult.scoreFavor
         }
         set (value) {
             builderResult.hasScoreFavor = true
             builderResult.scoreFavor = value
         }
    }
    func setScoreFavor(value:Int64) -> ScoreTableResultDto.Builder {
      self.scoreFavor = value
      return self
    }
    internal func clearScoreFavor() -> ScoreTableResultDto.Builder{
         builderResult.hasScoreFavor = false
         builderResult.scoreFavor = Int64(0)
         return self
    }
    var hasScoreAgainst:Bool {
         get {
              return builderResult.hasScoreAgainst
         }
    }
    var scoreAgainst:Int64 {
         get {
              return builderResult.scoreAgainst
         }
         set (value) {
             builderResult.hasScoreAgainst = true
             builderResult.scoreAgainst = value
         }
    }
    func setScoreAgainst(value:Int64) -> ScoreTableResultDto.Builder {
      self.scoreAgainst = value
      return self
    }
    internal func clearScoreAgainst() -> ScoreTableResultDto.Builder{
         builderResult.hasScoreAgainst = false
         builderResult.scoreAgainst = Int64(0)
         return self
    }
    var hasScoreDifference:Bool {
         get {
              return builderResult.hasScoreDifference
         }
    }
    var scoreDifference:Int64 {
         get {
              return builderResult.scoreDifference
         }
         set (value) {
             builderResult.hasScoreDifference = true
             builderResult.scoreDifference = value
         }
    }
    func setScoreDifference(value:Int64) -> ScoreTableResultDto.Builder {
      self.scoreDifference = value
      return self
    }
    internal func clearScoreDifference() -> ScoreTableResultDto.Builder{
         builderResult.hasScoreDifference = false
         builderResult.scoreDifference = Int64(0)
         return self
    }
    var hasPoints:Bool {
         get {
              return builderResult.hasPoints
         }
    }
    var points:Int64 {
         get {
              return builderResult.points
         }
         set (value) {
             builderResult.hasPoints = true
             builderResult.points = value
         }
    }
    func setPoints(value:Int64) -> ScoreTableResultDto.Builder {
      self.points = value
      return self
    }
    internal func clearPoints() -> ScoreTableResultDto.Builder{
         builderResult.hasPoints = false
         builderResult.points = Int64(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ScoreTableResultDto.Builder {
      builderResult = ScoreTableResultDto()
      return self
    }
    internal override func clone() -> ScoreTableResultDto.Builder {
      return ScoreTableResultDto.builderWithPrototype(builderResult)
    }
    internal override func build() -> ScoreTableResultDto {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ScoreTableResultDto {
      var returnMe:ScoreTableResultDto = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ScoreTableResultDto) -> ScoreTableResultDto.Builder {
      if other == ScoreTableResultDto() {
       return self
      }
      if (other.hasTeam) {
          mergeTeam(other.team)
      }
      if other.hasGamesPlayed {
           gamesPlayed = other.gamesPlayed
      }
      if other.hasGamesWined {
           gamesWined = other.gamesWined
      }
      if other.hasGamesDrawn {
           gamesDrawn = other.gamesDrawn
      }
      if other.hasGamesLost {
           gamesLost = other.gamesLost
      }
      if other.hasScoreFavor {
           scoreFavor = other.scoreFavor
      }
      if other.hasScoreAgainst {
           scoreAgainst = other.scoreAgainst
      }
      if other.hasScoreDifference {
           scoreDifference = other.scoreDifference
      }
      if other.hasPoints {
           points = other.points
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) -> ScoreTableResultDto.Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ScoreTableResultDto.Builder {
      var unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:TeamDto.Builder = TeamDto.Builder()
          if hasTeam {
            subBuilder.mergeFrom(team)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          team = subBuilder.buildPartial()

        case 16 :
          gamesPlayed = input.readInt64()

        case 24 :
          gamesWined = input.readInt64()

        case 32 :
          gamesDrawn = input.readInt64()

        case 40 :
          gamesLost = input.readInt64()

        case 48 :
          scoreFavor = input.readInt64()

        case 56 :
          scoreAgainst = input.readInt64()

        case 64 :
          scoreDifference = input.readInt64()

        case 72 :
          points = input.readInt64()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}


// @@protoc_insertion_point(global_scope)
